<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ShramSetu | Worker Profile</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>

<body class="bg-gray-100">

    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        [x-cloak] {
            display: none !important;
        }

        /* General Image Preview Container for rectangular images like Identity Doc */
        .image-preview-container {
            position: relative;
            display: inline-block;
            /* Default size for these containers */
            width: 120px;
            height: 120px;
        }

        /* Image inside the general preview container */
        .image-preview-container img {
            object-fit: cover;
            border-radius: 0.5rem;
            border: 2px solid #d1e9ff;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            width: 100%;
            height: 100%;
        }

        /* Profile Picture Specific Circular Preview Container */
        .profile-picture-preview-container {
            position: relative;
            width: 90px;
            /* Adjusted size for the circular container */
            height: 90px;
            border-radius: 50%;
            /* Make it round */
            overflow: hidden;
            /* Crucial for clipping the image */
            border: 2px solid #d1e9ff;
            /* Subtle border */
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            /* Soft shadow */
            display: flex;
            /* For centering the image if it doesn't perfectly fill */
            align-items: center;
            justify-content: center;
        }

        /* Image inside the circular profile picture container */
        .profile-picture-preview-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            /* Ensures image covers the circle without distortion */
        }

        /* Remove Image Button (General, for rectangular images like Identity Doc) */
        .remove-image-btn {
            position: absolute;
            top: -8px;
            /* Position slightly outside the border */
            right: -8px;
            /* Position slightly outside the border */
            background-color: rgba(239, 68, 68, 0.9);
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
            z-index: 10;
            border: 1.5px solid white;
            /* Added white border for contrast */
        }

        /* Remove Image Button (Specific to circular profile pic) */
        .profile-picture-remove-btn {
            position: absolute;
            top: 5px; /* Position relative to the *outer* wrapper's top */
            right: 5px; /* Position relative to the *outer* wrapper's right */
            background-color: rgba(239, 68, 68, 0.9);
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
            z-index: 20; /* Higher z-index to ensure it's always on top */
            border: 1.5px solid white;
            /* REMOVED: transform: translate(30%, -30%); */ /* No longer needed as it's positioned differently */
        }

        /* Carousel specific styles */
        .carousel-item {
            transition: opacity 0.5s ease-in-out;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .carousel-item.active {
            opacity: 1;
            position: relative;
        }

        .carousel-item:not(.active) {
            opacity: 0;
            position: absolute;
            top: 0;
            left: 0;
        }

        /* Custom validation styles for better UX */
        .invalid-field {
            border-color: #ef4444 !important;
            box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2) !important;
        }

        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        /* Fade-in animation for step transitions */
        @keyframes fade-in {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in {
            animation: fade-in 0.5s ease-out forwards;
        }

        /* Custom animation keyframe for heading */
        @keyframes fade-in-up {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .animate-fade-in-up {
            animation: fade-in-up 0.8s ease-out forwards;
        }
    </style>

    <div x-data="{ open: false }">
        <nav class="bg-[#cceaff] shadow-md fixed top-0 left-0 right-0 z-50">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-4">
                    <a href="/" class="text-3xl font-bold text-blue-700">ShramSetu</a>
                    <div class="hidden lg:flex items-center space-x-6">
                        <a href="/landingpage#whyShramSetu" class="text-gray-700 font-semibold hover:text-blue-600">Why
                            ShramSetu</a>
                        <a href="/howToWork" class="text-gray-700 font-semibold hover:text-blue-600">How to Find
                            Work</a>
                        <a href="/hire" class="text-gray-700 font-semibold hover:text-blue-600">Hire ShramSevik</a>
                        <a href="/landingpage#categories"
                            class="text-gray-700 font-semibold hover:text-blue-600">Categories</a>
                        <a href="/landingpage#benefits"
                            class="text-gray-700 font-semibold hover:text-blue-600">Benefits</a>
                        <a href="/login_user"
                            class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 font-semibold">Join</a>
                    </div>
                    <div class="lg:hidden">
                        <button @click="open = !open" type="button"
                            class="inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-blue-700 hover:bg-blue-100">
                            <svg x-show="!open" class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M4 6h16M4 12h16M4 18h16" />
                            </svg>
                            <svg x-show="open" x-cloak class="h-6 w-6" fill="none" stroke="currentColor"
                                viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <div x-show="open" x-transition x-cloak @click.away="open = false"
                class="lg:hidden fixed top-16 left-0 right-0 w-full bg-[#cceaff] px-6 py-4 space-y-3 rounded-b-3xl shadow-md z-40">
                <a href="#whyShramSetu" class="flex items-center gap-2 p-2 rounded-xl hover:bg-blue-200 shadow">
                    <div class="w-9 h-9 bg-blue-100 text-blue-700 rounded-full flex items-center justify-center">
                        <i class="fas fa-lightbulb"></i>
                    </div>
                    <span class="text-base font-medium">Why ShramSetu</span>
                </a>
                <a href="/hire" class="flex items-center gap-2 p-2 rounded-xl hover:bg-green-100 shadow">
                    <div class="w-9 h-9 bg-green-100 text-green-700 rounded-full flex items-center justify-center">
                        <i class="fas fa-user-tie"></i>
                    </div>
                    <span class="text-base font-medium">Hire ShramSevik</span>
                </a>
                <a href="/work" class="flex items-center gap-2 p-2 rounded-xl hover:bg-indigo-100 shadow">
                    <div class="w-9 h-9 bg-indigo-100 text-indigo-700 rounded-full flex items-center justify-center">
                        <i class="fas fa-hammer"></i>
                    </div>
                    <span class="text-base font-medium">Find Work</span>
                </a>
                <a href="#categories" class="flex items-center gap-2 p-2 rounded-xl hover:bg-sky-100 shadow">
                    <div class="w-9 h-9 bg-sky-100 text-sky-700 rounded-full flex items-center justify-center">
                        <i class="fas fa-th-large"></i>
                    </div>
                    <span class="text-base font-medium">Categories</span>
                </a>
                <a href="/about" class="flex items-center gap-2 p-2 rounded-xl hover:bg-pink-100 shadow">
                    <div class="w-9 h-9 bg-pink-100 text-pink-700 rounded-full flex items-center justify-center">
                        <i class="fas fa-users"></i>
                    </div>
                    <span class="text-base font-medium">About Us</span>
                </a>
                <a href="/login_user"
                    class="block text-center mt-4 bg-blue-600 text-white py-2.5 rounded-full font-semibold shadow hover:bg-blue-700 hover:scale-105 transition">
                    <i class="fas fa-arrow-right-to-bracket mr-1"></i> Join Now
                </a>
            </div>
        </nav>
    </div>
<main class="pt-24 pb-16 px-4 sm:px-6 lg:px-8 min-h-screen flex items-center justify-center bg-cover bg-center bg-no-repeat bg-fixed overflow-hidden" style="background-image: url('/images/carousel/mainbg.png');">
        <div x-data="workerProfileForm()" x-init="initForm()"
            class="max-w-6xl mx-auto w-full grid grid-cols-1 lg:grid-cols-[2fr_3fr] rounded-3xl shadow-3xl overflow-hidden p-6 lg:p-0 min-h-[500px] lg:min-h-[550px]">

            <div
                class="relative h-64 sm:h-80 md:h-[600px] hidden lg:block lg:h-full flex items-center justify-center bg-blue-200 rounded-2xl lg:rounded-l-3xl lg:rounded-r-none p-4 lg:p-0">
                <div x-data="{
                    images: [
                        '/images/carousel/worker.1.png',
                        '/images/carousel/worker.2.png',
                        '/images/carousel/worker.3.png',
                        '/images/carousel/worker.4.png',
                        '/images/carousel/worker.5.png',
                    ],
                    currentIndex: 0,
                    autoplayInterval: null,
                    init() {
                        this.startAutoplay();
                    },
                    startAutoplay() {
                        this.autoplayInterval = setInterval(() => {
                            this.nextImage();
                        }, 3000); // Change image every 3 seconds
                    },
                    stopAutoplay() {
                        clearInterval(this.autoplayInterval);
                    },
                    nextImage() {
                        this.currentIndex = (this.currentIndex + 1) % this.images.length;
                    },
                    prevImage() {
                        this.currentIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;
                    },
                    goToImage(index) {
                        this.currentIndex = index;
                        this.stopAutoplay(); // Stop autoplay when manually navigating
                        this.startAutoplay(); // Restart autoplay after a delay
                    }
                }" @mouseenter="stopAutoplay" @mouseleave="startAutoplay"
                    class="relative w-full h-full overflow-hidden rounded-xl lg:rounded-l-3xl lg:rounded-r-none">
                    <template x-for="(image, index) in images" :key="index">
                        <img :src="image" :class="{ 'active': currentIndex === index }"
                            class="carousel-item rounded-xl lg:rounded-l-3xl lg:rounded-r-none"
                            alt="Worker profile image">
                    </template>

                    <div class="absolute bottom-4 left-0 right-0 flex justify-center space-x-2 z-10">
                        <template x-for="(image, index) in images" :key="index">
                            <button @click="goToImage(index)"
                                :class="{ 'bg-blue-600': currentIndex === index, 'bg-gray-300': currentIndex !== index }"
                                class="w-3 h-3 rounded-full focus:outline-none transition-colors duration-300"></button>
                        </template>
                    </div>
                </div>
            </div>

    <div class="lg:p-8 p-4 h-full flex flex-col justify-between relative overflow-hidden bg-cover rounded-xl lg:rounded-none bg-center bg-no-repeat" style="background-image: url('/images/carousel/workerbg.png');">
    <form id="postJobForm" @submit.prevent="submitForm()" class="relative space-y-6 flex-grow max-h-full overflow-y-auto backdrop-blur-md bg-white/10 border border-white/20 rounded-xl shadow-2xl p-8 z = [-10]">
    <form id="workerProfileForm" action="/submit-worker-profile" method="POST" enctype="multipart/form-data" class="space-y-6 flex-grow max-h-full overflow-y-auto" x-on:submit.prevent="submitForm()">
                    <h2 class="text-3xl font-extrabold text-gray-800 text-center mb-6 relative">
                        <span
                            class="relative inline-block px-6 py-3 rounded-full bg-gradient-to-r from-blue-600 to-indigo-700 text-white shadow-2xl overflow-hidden animate-fade-in-up">
                            <span
                                class="absolute top-0 left-0 w-full h-full bg-white opacity-10 blur-sm rounded-full"></span>
                            <i class="fas fa-id-badge mr-2 text-xl"></i>
                            <span class="tracking-wide">Build Your Worker Profile</span>
                            <span class="absolute -bottom-1 -right-1 text-4xl text-white opacity-20 transform rotate-45"><i
                                    class="fas fa-hard-hat"></i></span>
                        </span>
                    </h2>

                    <div class="flex justify-center space-x-3 mb-8">
                        <template x-for="stepNum in 6" :key="stepNum">
                            <div @click="currentStep = stepNum"
                                :class="{ 'bg-blue-600 transform scale-110 shadow-lg': currentStep === stepNum, 'bg-blue-300': currentStep < stepNum, 'bg-blue-400': currentStep > stepNum }"
                                class="w-8 h-8 rounded-full flex items-center justify-center text-white font-bold cursor-pointer transition-all duration-300 ease-in-out">
                                <span x-text="stepNum"></span>
                            </div>
                        </template>
                    </div>


                    <section x-show="currentStep === 1"
                        class="bg-white border border-blue-200 shadow-md rounded-xl p-6 space-y-4 animate-fade-in">
                        <h2 class="text-xl font-semibold text-blue-700 flex items-center gap-2">
                            <i class="fas fa-user-circle text-blue-600"></i> Personal Details
                        </h2>

                        <div class="grid md:grid-cols-2 gap-4 items-start">
                            <div class="form-group">
                                <label for="fullName" class="block mb-1 font-medium text-gray-700 text-sm">
                                    <i class="fas fa-user text-blue-600 mr-1"></i>Full Name
                                </label>
                                <div>
                                    <input type="text" id="fullName" name="fullName" x-model="formData.fullName"
                                        @input="validateStep(1)"
                                        :class="{'invalid-field': validationErrors.fullName}"
                                        placeholder="Your Full Name" required
                                        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                    <p x-show="validationErrors.fullName" x-text="validationErrors.fullName"
                                        class="error-message"></p>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="profilePicture" class="block mb-1 font-medium text-gray-700 text-sm">
                                    <i class="fas fa-image text-blue-600 mr-1"></i>Profile Picture
                                </label>
                                <div>
                                    <input type="file" id="profilePicture" name="profilePicture" accept="image/*"
                                        @change="handleProfilePictureUpload($event)"
                                        class="w-full text-sm px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                    <p x-show="validationErrors.profilePicture"
                                        x-text="validationErrors.profilePicture" class="error-message"></p>
                                </div>
                                <div class="mt-2 flex items-center justify-center border border-gray-200 rounded-md p-2 bg-white shadow-inner relative" x-show="formData.profilePicturePreview">
                                    <button type="button" @click="removeProfilePicture()" class="profile-picture-remove-btn">×</button>
                                    <div class="profile-picture-preview-container">
                                        <img :src="formData.profilePicturePreview" class="w-full h-full object-cover" alt="Profile Picture Preview">
                                    </div>
                                </div>
                                <p x-show="!formData.profilePicturePreview" class="text-gray-500 italic text-sm w-full text-center py-2">
                                    No profile picture selected.
                                </p>
                            </div>
                        </div>

                        <div>
                            <label for="shortBio" class="block text-sm font-medium mb-1 text-gray-700">
                                <span class="text-blue-600"><i class="fas fa-align-left mr-1"></i></span>
                                Short Bio / Introduction
                            </label>
                            <textarea name="shortBio" id="shortBio" rows="2" x-model="formData.shortBio"
                                @input="validateStep(1)" :class="{'invalid-field': validationErrors.shortBio}"
                                placeholder="Tell employers about yourself and your expertise."
                                class="w-full border border-gray-300 px-4 py-2 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none"></textarea>
                            <p x-show="validationErrors.shortBio" x-text="validationErrors.shortBio"
                                class="error-message"></p>
                        </div>

                        <div class="flex justify-end mt-6">
                            <button type="button" @click="nextStep(1)"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                Next <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </section>

                    <section x-show="currentStep === 2"
                        class="bg-white border border-blue-200 shadow-md rounded-xl p-6 space-y-4 animate-fade-in">
                        <h2 class="text-xl font-semibold text-blue-700 flex items-center gap-2">
                            <i class="fas fa-tools text-blue-600"></i> Skills & Contact Details
                        </h2>

                        <div class="grid md:grid-cols-2 gap-4 items-start">
                            <div class="form-group" x-data="{
                                open: false,
                                selected: { value: '', label: 'Select Experience Level' },
                                options: getExperienceOptions(), // From main Alpine data
                                init() {
                                    // Set initial selected value if formData already has it
                                    if (formData.yearsExperience) {
                                        const found = this.options.find(opt => opt.value === formData.yearsExperience);
                                        if (found) this.selected = found;
                                    }
                                },
                                selectOption(option) {
                                    this.selected = option;
                                    this.open = false;
                                    formData.yearsExperience = option.value; // Update main form data
                                    validateStep(2); // Validate after selection
                                }
                            }">
                                <label for="yearsExperience" class="block text-sm font-medium mb-1 text-gray-700">
                                    <i class="fas fa-trophy mr-1 text-blue-600"></i> Years of Experience
                                </label>

                                <div class="relative">
                                    <button type="button" @click="open = !open"
                                        :class="{'invalid-field': validationErrors.yearsExperience}"
                                        class="w-full text-left px-4 py-2 border border-gray-300 rounded-md bg-white focus:ring-2 focus:ring-blue-500 flex justify-between items-center text-gray-800 shadow-sm hover:border-blue-400 transition-all">
                                        <span x-text="selected.label || 'Select Experience Level'"
                                            class="text-left w-full truncate"></span>
                                        <i class="fas"
                                            :class="open ? 'fa-chevron-up' : 'fa-chevron-down'"></i>
                                    </button>

                                    <ul x-show="open" @click.outside="open = false" x-cloak
                                        class="absolute z-20 mt-1 w-full bg-white border border-blue-300 rounded-md shadow max-h-60 overflow-y-auto">
                                        <template x-for="option in options" :key="option.value">
                                            <li @click="selectOption(option)"
                                                class="px-4 py-2 hover:bg-blue-100 cursor-pointer text-blue-900 flex items-center justify-between">
                                                <span x-text="option.label"></span>
                                                <i x-show="selected.value === option.value"
                                                    class="fas fa-check-circle text-blue-500 ml-2"></i>
                                            </li>
                                        </template>
                                    </ul>
                                </div>
                                <input type="hidden" id="yearsExperience" name="yearsExperience"
                                    x-model="formData.yearsExperience">
                                <p x-show="validationErrors.yearsExperience" x-text="validationErrors.yearsExperience"
                                    class="error-message"></p>
                            </div>

                            <div>
                                <label for="servicePincode" class="block text-sm font-medium text-gray-700 mb-1">
                                    <i class="fas fa-map-marker-alt text-blue-600 mr-1"></i> Service Area Pincode
                                </label>
                                <div class="flex items-center gap-2">
                                    <input type="tel" id="servicePincode" name="servicePincode"
                                        x-model="formData.servicePincode" @input="validateStep(2)"
                                        :class="{'invalid-field': validationErrors.servicePincode}"
                                        placeholder="e.g., 221001"
                                        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                    <button type="button" @click="detectPincode()"
                                        class="bg-blue-500 hover:bg-blue-600 text-white text-sm px-3 py-2 rounded-md shadow-sm transition duration-300 ease-in-out transform hover:scale-105">
                                        <i class="fas fa-crosshairs"></i>
                                    </button>
                                </div>
                                <span x-text="locationStatusMessage" :class="locationStatusClass" class="text-gray-600 text-xs italic mt-1 block"></span>
                                <p x-show="validationErrors.servicePincode" x-text="validationErrors.servicePincode"
                                    class="error-message"></p>
                            </div>
                        </div>

                        <div x-data="{
                            open: false,
                            selected: { label: 'Select your primary skill', value: '' },
                            options: getSkillOptions(), // From main Alpine data
                            init() {
                                // Set initial selected value if formData already has it
                                if (formData.workerSkills) {
                                    const found = this.options.find(opt => opt.value === formData.workerSkills);
                                    if (found) this.selected = found;
                                }
                            },
                            selectOption(option) {
                                this.selected = option;
                                this.open = false;
                                formData.workerSkills = option.value; // Update main form data
                                validateStep(2); // Validate after selection
                            }
                        }">
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700 mt-2 mb-2">
                                    <i class="fas fa-tools text-blue-600 mr-1"></i> Add Your Skill
                                </label>

                                <div class="relative">
                                    <button type="button" @click="open = !open"
                                        :class="{'invalid-field': validationErrors.workerSkills}"
                                        class="w-full text-left px-4 py-2 border border-gray-300 rounded-md bg-white focus:ring-2 focus:ring-blue-500 flex justify-between items-center text-gray-800 shadow-sm hover:border-blue-400 transition-all">
                                        <span><i :class="selected.icon" class="mr-2 text-blue-600"></i><span
                                                x-text="selected.label"></span></span>
                                        <i class="fas"
                                            :class="open ? 'fa-chevron-up' : 'fa-chevron-down'"></i>
                                    </button>

                                    <ul x-show="open" @click.outside="open = false" x-cloak
                                        class="absolute left-0 right-0 z-30 mt-1 bg-white border border-blue-300 rounded-md shadow max-h-60 overflow-y-auto w-full">
                                        <template x-for="option in options" :key="option.value">
                                            <li @click="selectOption(option)"
                                                class="px-4 py-2 hover:bg-blue-100 cursor-pointer text-blue-900 flex items-center justify-between">
                                                <div><i :class="option.icon" class="mr-2 text-blue-600"></i> <span
                                                        x-text="option.label"></span></div>
                                                <i x-show="selected.value === option.value"
                                                    class="fas fa-check-circle text-blue-500 ml-2"></i>
                                            </li>
                                        </template>
                                    </ul>
                                </div>
                                <input type="hidden" name="workerSkills" x-model="formData.workerSkills">
                                <p x-show="validationErrors.workerSkills" x-text="validationErrors.workerSkills"
                                    class="error-message"></p>
                            </div>
                        </div>

                        <div class="grid md:grid-cols-2 gap-4 items-start">
                            <div>
                                <label for="contactPhone" class="block text-sm font-medium text-gray-700 mb-1">
                                    <i class="fas fa-phone text-blue-600 mr-1"></i> Phone Number
                                </label>
                                <input type="tel" id="contactPhone" name="contactPhone"
                                    x-model="formData.contactPhone" @input="validateStep(2)"
                                    :class="{'invalid-field': validationErrors.contactPhone}"
                                    placeholder="e.g., 9876543210"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                <p x-show="validationErrors.contactPhone" x-text="validationErrors.contactPhone"
                                    class="error-message"></p>
                            </div>
                            <div>
                                <label for="contactEmail" class="block text-sm font-medium text-gray-700 mb-1">
                                    <i class="fas fa-envelope text-blue-600 mr-1"></i> Contact Email (Optional)
                                </label>
                                <input type="email" id="contactEmail" name="contactEmail"
                                    x-model="formData.contactEmail" @input="validateStep(2)"
                                    :class="{'invalid-field': validationErrors.contactEmail}"
                                    placeholder="your.email@example.com"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                <p x-show="validationErrors.contactEmail" x-text="validationErrors.contactEmail"
                                    class="error-message"></p>
                            </div>
                        </div>

                        <div class="flex justify-between mt-6">
                            <button type="button" @click="prevStep()"
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                <i class="fas fa-arrow-left mr-2"></i> Previous
                            </button>
                            <button type="button" @click="nextStep(2)"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                Next <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </section>

                    <section x-show="currentStep === 3"
                        class="bg-white border border-blue-200 shadow-md rounded-xl p-6 space-y-4 animate-fade-in">
                        <h2 class="text-xl font-semibold text-blue-700 flex items-center gap-2">
                            <i class="fas fa-sliders-h text-blue-600"></i> Preferences
                        </h2>

                        <div x-data="timePicker(formData, validationErrors, validateStep)" x-init="init()"
                            class="form-group border border-blue-100 bg-blue-50 p-4 rounded-xl shadow-sm hover:shadow-md transition duration-300">
                            <label class="block text-gray-800 text-sm font-semibold mb-2">Do Not Disturb Time</label>
                            <p class="text-gray-600 text-sm mb-4">Set the time range when you don’t want to receive
                                job notifications.</p>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">

                                <div class="relative">
                                    <label class="text-sm text-gray-600 mb-1 block">Start Time</label>
                                    <div class="relative">
                                        <button @click="openStart = !openStart" type="button"
                                            :class="{'invalid-field': $parent.validationErrors.dndStartTime}"
                                            class="w-full text-left pl-10 pr-3 py-2 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-500 bg-white shadow-sm hover:shadow transition duration-200">
                                            <span><i
                                                    class="fas fa-clock text-blue-600 mr-2 absolute left-3 top-2.5"></i></span>
                                            <span x-text="selectedStart || 'Select Start Time'"></span>
                                        </button>

                                        <ul x-show="openStart" @click.outside="openStart = false"
                                            class="absolute z-30 mt-1 w-full bg-white border border-blue-200 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                            <template x-for="time in timeSlots" :key="time">
                                                <li @click="selectTime('start', time); $parent.validateStep(3);"
                                                    class="px-4 py-2 hover:bg-blue-100 cursor-pointer text-blue-900">
                                                    <span x-text="time"></span>
                                                </li>
                                            </template>
                                        </ul>
                                        <input type="hidden" name="dndStartTime" x-model="$parent.formData.dndStartTime">
                                        <p x-show="$parent.validationErrors.dndStartTime"
                                            x-text="$parent.validationErrors.dndStartTime" class="error-message"></p>
                                    </div>
                                </div>

                                <div class="relative">
                                    <label class="text-sm text-gray-600 mb-1 block">End Time</label>
                                    <div class="relative">
                                        <button @click="openEnd = !openEnd" type="button"
                                            :class="{'invalid-field': $parent.validationErrors.dndEndTime}"
                                            class="w-full text-left pl-10 pr-3 py-2 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-500 bg-white shadow-sm hover:shadow transition duration-200">
                                            <span><i
                                                    class="fas fa-clock text-blue-600 mr-2 absolute left-3 top-2.5"></i></span>
                                            <span x-text="selectedEnd || 'Select End Time'"></span>
                                        </button>

                                        <ul x-show="openEnd" @click.outside="openEnd = false"
                                            class="absolute z-30 mt-1 w-full bg-white border border-blue-200 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                            <template x-for="time in timeSlots" :key="time">
                                                <li @click="selectTime('end', time); $parent.validateStep(3);"
                                                    class="px-4 py-2 hover:bg-blue-100 cursor-pointer text-blue-900">
                                                    <span x-text="time"></span>
                                                </li>
                                            </template>
                                        </ul>
                                        <input type="hidden" name="dndEndTime" x-model="$parent.formData.dndEndTime">
                                        <p x-show="$parent.validationErrors.dndEndTime" x-text="$parent.validationErrors.dndEndTime"
                                            class="error-message"></p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group bg-blue-50 border border-blue-200 p-4 rounded-md shadow-sm">
                            <label for="minPayExpectation"
                                class="block text-gray-800 text-sm font-semibold mb-2">Minimum Pay Expectation</label>
                            <input type="number" id="minPayExpectation" name="minPayExpectation"
                                x-model="formData.minPayExpectation" @input="validateStep(3)"
                                :class="{'invalid-field': validationErrors.minPayExpectation}"
                                placeholder="e.g., 500 INR" min="0"
                                class="w-full border border-gray-300 rounded px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <p class="text-gray-600 text-xs mt-1">Set your minimum expected pay per job/day. Leave
                                blank if flexible.</p>
                            <p x-show="validationErrors.minPayExpectation"
                                x-text="validationErrors.minPayExpectation" class="error-message"></p>
                        </div>

                        <div class="flex justify-between mt-6">
                            <button type="button" @click="prevStep()"
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                <i class="fas fa-arrow-left mr-2"></i> Previous
                            </button>
                            <button type="button" @click="nextStep(3)"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                Next <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </section>

                    <section x-show="currentStep === 4"
                        class="bg-white border border-blue-200 shadow-md rounded-xl p-6 space-y-4 animate-fade-in">
                        <h2 class="text-xl font-semibold text-blue-700 flex items-center gap-2">
                            <i class="fas fa-wallet text-blue-600"></i> Payment Setup
                        </h2>
                        <div class="flex items-center gap-2 text-sm font-medium text-gray-700">
                            <i class="fas fa-bank text-blue-600"></i> Bank Details
                        </div>

                        <div class="grid md:grid-cols-2 gap-4 items-start mt-4">
                            <div>
                                <label for="bankAccountNumber" class="block text-sm font-medium text-gray-700 mb-1">
                                    Bank Account Number
                                </label>
                                <input type="text" id="bankAccountNumber" name="bankAccountNumber"
                                    x-model="formData.bankAccountNumber" @input="validateStep(4)"
                                    :class="{'invalid-field': validationErrors.bankAccountNumber}"
                                    placeholder="Your Bank Account Number"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                <p x-show="validationErrors.bankAccountNumber"
                                    x-text="validationErrors.bankAccountNumber" class="error-message"></p>
                            </div>
                            <div>
                                <label for="ifscCode" class="block text-sm font-medium text-gray-700 mb-1">
                                    IFSC Code
                                </label>
                                <input type="text" id="ifscCode" name="ifscCode" x-model="formData.ifscCode"
                                    @input="validateStep(4)" :class="{'invalid-field': validationErrors.ifscCode}"
                                    placeholder="SBIN0000001"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                <p x-show="validationErrors.ifscCode" x-text="validationErrors.ifscCode"
                                    class="error-message"></p>
                            </div>
                        </div>

                        <div class="flex justify-between mt-6">
                            <button type="button" @click="prevStep()"
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                <i class="fas fa-arrow-left mr-2"></i> Previous
                            </button>
                            <button type="button" @click="nextStep(4)"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                Next <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </section>

                    <section x-show="currentStep === 5"
                        class="bg-white border border-blue-200 shadow-md rounded-xl p-6 space-y-4 animate-fade-in">
                        <h2 class="text-xl font-semibold text-blue-700 flex items-center gap-2">
                            <i class="fas fa-id-card-alt text-blue-600"></i> Identity Verification
                        </h2>
                        <div class="flex items-center gap-2 text-sm text-gray-700">
                            <i class="fas fa-medal text-blue-500"></i>
                            <span>Upload Aadhar Card to get a verified badge on your profile.</span>
                        </div>
                        <div class="form-group border border-dashed border-gray-300 p-4 rounded-md bg-blue-50/20">
                            <label for="identityDocument" class="block mb-1 font-medium text-gray-700 text-sm">
                                <i class="fas fa-file-alt text-blue-600 mr-1"></i> Aadhar Card / Identity Document
                            </label>
                            <input type="file" id="identityDocument" name="identityDocument"
                                accept=".jpg,.jpeg,.png,.pdf" @change="handleIdentityDocumentUpload($event)"
                                class="w-full text-sm px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                            <p class="text-xs text-gray-500 mt-1">Accepted formats: JPG, JPEG, PNG, PDF. Max 5MB.</p>
                            <p x-show="validationErrors.identityDocument" x-text="validationErrors.identityDocument"
                                class="error-message mt-1"></p>
                            <div class="mt-2 flex items-center justify-center border border-gray-200 rounded-md p-2 bg-white shadow-inner" x-show="formData.identityDocumentPreview">
                                <div class="image-preview-container">
                                    <img :src="formData.identityDocumentPreview" class="image-preview-thumbnail" alt="Identity Document Preview">
                                    <button type="button" @click="removeIdentityDocument()" class="remove-image-btn">×</button>
                                </div>
                            </div>
                            <p x-show="!formData.identityDocumentPreview" class="text-gray-500 italic text-sm w-full text-center py-2">
                                No document selected.
                            </p>
                        </div>

                        <div class="flex justify-between mt-6">
                            <button type="button" @click="prevStep()"
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                <i class="fas fa-arrow-left mr-2"></i> Previous
                            </button>
                            <button type="button" @click="nextStep(5)"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                Next <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </section>

                    <section x-show="currentStep === 6"
                        class="bg-white border border-blue-200 shadow-md rounded-xl p-6 space-y-4 animate-fade-in">
                        <h2 class="text-xl font-semibold text-blue-700 flex items-center gap-2">
                            <i class="fas fa-eye text-blue-600"></i> Review Your Profile
                        </h2>
                        <div class="space-y-3 text-gray-700 bg-blue-50 p-4 rounded-md">
                            <div>
                                <p class="font-semibold text-blue-800">Full Name:</p>
                                <p x-text="formData.fullName || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Profile Picture:</p>
                                <div class="flex flex-wrap gap-2" id="profilePictureReview">
                                    <template x-if="formData.profilePicturePreview">
                                        <img :src="formData.profilePicturePreview"
                                            class="w-24 h-24 object-cover rounded-full border border-blue-200 shadow-sm"
                                            alt="Profile Picture">
                                    </template>
                                    <p x-show="!formData.profilePicturePreview" class="text-gray-500 italic">No
                                        picture uploaded.</p>
                                </div>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Short Bio:</p>
                                <p x-text="formData.shortBio || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Years of Experience:</p>
                                <p x-text="getExperienceLabel(formData.yearsExperience) || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Service Area Pincode:</p>
                                <p x-text="formData.servicePincode || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Primary Skill:</p>
                                <p x-text="getSkillLabel(formData.workerSkills) || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Phone Number:</p>
                                <p x-text="formData.contactPhone || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Contact Email:</p>
                                <p x-text="formData.contactEmail || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Do Not Disturb Time:</p>
                                <p
                                    x-text="`${formData.dndStartTime || 'Not Set'} to ${formData.dndEndTime || 'Not Set'}`">
                                </p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Minimum Pay Expectation:</p>
                                <p x-text="formData.minPayExpectation ? '₹' + formData.minPayExpectation : 'N/A'">
                                </p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Bank Account Number:</p>
                                <p x-text="formData.bankAccountNumber || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">IFSC Code:</p>
                                <p x-text="formData.ifscCode || 'N/A'"></p>
                            </div>
                            <div>
                                <p class="font-semibold text-blue-800">Identity Document:</p>
                                <div class="flex flex-wrap gap-2" id="identityDocumentReview">
                                    <template x-if="formData.identityDocumentPreview">
                                        <img :src="formData.identityDocumentPreview"
                                            class="w-24 h-24 object-cover rounded-md border border-blue-200 shadow-sm"
                                            alt="Identity Document">
                                    </template>
                                    <p x-show="!formData.identityDocumentPreview" class="text-gray-500 italic">No
                                        document uploaded.</p>
                                </div>
                            </div>
                        </div>


                        <div class="flex justify-between mt-6">
                            <button type="button" @click="prevStep()"
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                <i class="fas fa-arrow-left mr-2"></i> Previous
                            </button>
                            <button type="submit"
                                class="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-6 rounded-md shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                                <i class="fas fa-paper-plane mr-2"></i> Save My Profile
                            </button>
                        </div>
                    </section>
                </form>
                </div>
            </div>
        </div>
    </main>

    <footer class="bg-gradient-to-b from-gray-900 to-gray-800 text-gray-300 py-16">
        <div class="w-full max-w-7xl mx-auto px-4 sm:px-6 md:px-8 lg:px-12">
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-10 text-center md:text-left">

                <div>
                    <h4 class="text-2xl font-bold text-white mb-3">ShramSetu</h4>
                    <p class="text-sm leading-relaxed">
                        Empowering skilled laborers by directly connecting them with real job opportunities—without
                        middlemen.
                    </p>
                    <p class="mt-6 text-xs text-gray-400">&copy; 2025 ShramSetu. All rights reserved.</p>
                </div>

                <div>
                    <h4 class="text-lg font-semibold text-white mb-4">Quick Links</h4>
                    <ul class="space-y-2 text-sm">
                        <li><a href="#whyShramSetu" class="hover:text-white transition">Why ShramSetu</a></li>
                        <li><a href="#howItWork" class="hover:text-white transition">How It Works</a></li>
                        <li><a href="#categories" class="hover:text-white transition">Categories</a></li>
                        <li><a href="/benefits" class="hover:text-white transition">Benefits</a></li>
                        <li><a href="/about" class="hover:text-white transition">About Us</a></li>
                        <li><a href="#contact" class="hover:text-white transition">Contact Us</a></li>
                    </ul>
                </div>

                <div>
                    <h4 class="text-lg font-semibold text-white mb-4">Legal</h4>
                    <ul class="space-y-2 text-sm">
                        <li><a href="/privacy" class="hover:text-white transition">Privacy Policy</a></li>
                        <li><a href="/terms" class="hover:text-white transition">Terms of Service</a></li>
                        <li><a href="/disclaimer" class="hover:text-white transition">Disclaimer</a></li>
                    </ul>
                </div>

                <div>
                    <h4 class="text-lg font-semibold text-white mb-4">Follow Us</h4>
                    <div class="flex justify-center md:justify-start space-x-4">
                        <a href="#" class="hover:text-blue-400 transition"><i class="fab fa-facebook fa-lg"></i></a>
                        <a href="#" class="hover:text-blue-300 transition"><i class="fab fa-twitter fa-lg"></i></a>
                        <a href="https://www.linkedin.com/company/shramsetu" class="hover:text-blue-500 transition"><i
                                class="fab fa-linkedin fa-lg"></i></a>
                        <a href="#" class="hover:text-pink-400 transition"><i class="fab fa-instagram fa-lg"></i></a>
                    </div>
                </div>
            </div>

            <div class="mt-12 text-center text-sm text-gray-400 px-4">
                <p>ShramSetu — Bridging Skilled Talent & Opportunity Across India 🇮🇳</p>
                <p>Crafted with ❤️ by the ShramSetu Team</p>
            </div>
        </div>
    </footer>

    <script>
        // Alpine.js data function for the worker profile form
        function workerProfileForm() {
            return {
                currentStep: 1,
                formData: {
                    fullName: '',
                    profilePictureFile: null, // To store File object
                    profilePicturePreview: '', // To store base64 for display
                    shortBio: '',
                    yearsExperience: '',
                    servicePincode: '',
                    workerSkills: '',
                    contactPhone: '',
                    contactEmail: '',
                    dndStartTime: '',
                    dndEndTime: '',
                    minPayExpectation: '',
                    bankAccountNumber: '',
                    ifscCode: '',
                    identityDocumentFile: null, // To store File object
                    identityDocumentPreview: '', // To store base64 for display
                },
                validationErrors: {},
                locationStatusMessage: '',
                locationStatusClass: '',

                initForm() {
                    // Initialization for nested components (like dropdowns) is handled within their x-data blocks,
                    // where they can access the main `formData` via `$parent.formData`.
                },

                // Helper for experience options
                getExperienceOptions() {
                    return [
                        { value: '', label: 'Select Experience Level' },
                        { value: '0-1', label: '0-1 Year' },
                        { value: '1-3', label: '1-3 Years' },
                        { value: '3-5', label: '3-5 Years' },
                        { value: '5+', label: '5+ Years' }
                    ];
                },
                getExperienceLabel(value) {
                    const option = this.getExperienceOptions().find(opt => opt.value === value);
                    return option ? option.label : 'N/A';
                },

                // Helper for skill options
                getSkillOptions() {
                    return [
                        { label: 'Select your primary skill', value: '', icon: '' },
                        { label: 'Plumbing', value: 'plumbing', icon: 'fas fa-wrench' },
                        { label: 'Electrical', value: 'electrical', icon: 'fas fa-bolt' },
                        { label: 'Carpentry', value: 'carpentry', icon: 'fas fa-hammer' },
                        { label: 'Painting', value: 'painting', icon: 'fas fa-paint-roller' },
                        { label: 'Gardening', value: 'gardening', icon: 'fas fa-leaf' },
                        { label: 'House Cleaning', value: 'cleaning', icon: 'fas fa-broom' },
                        { label: 'Masonry', value: 'masonry', icon: 'fas fa-tools' },
                        { label: 'AC Repair', value: 'ac_repair', icon: 'fas fa-fan' },
                        { label: 'Driving', value: 'driving', icon: 'fas fa-car' },
                        { label: 'Delivery', value: 'delivery', icon: 'fas fa-truck' },
                        { label: 'Cooking', value: 'cooking', icon: 'fas fa-utensils' },
                        { label: 'Welding', value: 'welding', icon: 'fas fa-screwdriver-wrench' },
                        { label: 'Tailoring', value: 'tailoring', icon: 'fas fa-scissors' },
                        { label: 'Babysitting', value: 'babysitting', icon: 'fas fa-baby' },
                        { label: 'Security Guard', value: 'security', icon: 'fas fa-shield-alt' },
                        { label: 'Salon Services', value: 'salon', icon: 'fas fa-cut' },
                        { label: 'Bike Mechanic', value: 'bike_mechanic', icon: 'fas fa-motorcycle' },
                        { label: 'CCTV Installation', value: 'cctv', icon: 'fas fa-video' },
                        { label: 'Sweeper', value: 'sweeper', icon: 'fas fa-trash' },
                        { label: 'Furniture Assembly', value: 'furniture', icon: 'fas fa-couch' },
                        { label: 'Labour (Unskilled)', value: 'labour', icon: 'fas fa-people-carry' },
                        { label: 'Computer Repair', value: 'computer_repair', icon: 'fas fa-desktop' },
                        { label: 'Mobile Repair', value: 'mobile_repair', icon: 'fas fa-mobile-alt' }
                    ];
                },
                getSkillLabel(value) {
                    const option = this.getSkillOptions().find(opt => opt.value === value);
                    return option ? option.label : 'N/A';
                },


                // Profile Picture Handling
                handleProfilePictureUpload(event) {
                    const file = event.target.files[0];
                    this.formData.profilePictureFile = null;
                    this.formData.profilePicturePreview = '';
                    this.validationErrors.profilePicture = '';

                    if (file) {
                        if (!file.type.startsWith("image/")) {
                            this.validationErrors.profilePicture = "Please upload a valid image file.";
                            event.target.value = ""; // Clear input
                            return;
                        }
                        if (file.size > 5 * 1024 * 1024) {
                            this.validationErrors.profilePicture = "Image size must be less than 5MB.";
                            event.target.value = ""; // Clear input
                            return;
                        }

                        this.formData.profilePictureFile = file;
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            this.formData.profilePicturePreview = e.target.result;
                        };
                        reader.readAsDataURL(file);
                    }
                    this.validateStep(1); // Re-validate the step
                },
                removeProfilePicture() {
                    this.formData.profilePictureFile = null;
                    this.formData.profilePicturePreview = '';
                    document.getElementById('profilePicture').value = ''; // Clear actual file input
                    this.validationErrors.profilePicture = ''; // Clear error if any
                    this.validateStep(1); // Re-validate the step
                },

                // Identity Document Handling
                handleIdentityDocumentUpload(event) {
                    const file = event.target.files[0];
                    this.formData.identityDocumentFile = null;
                    this.formData.identityDocumentPreview = '';
                    this.validationErrors.identityDocument = '';

                    if (file) {
                        const validTypes = ["image/jpeg", "image/png", "application/pdf"];
                        if (!validTypes.includes(file.type)) {
                            this.validationErrors.identityDocument = "Only JPG, PNG, or PDF files are allowed.";
                            event.target.value = "";
                            return;
                        }
                        if (file.size > 5 * 1024 * 1024) {
                            this.validationErrors.identityDocument = "File size must be under 5MB.";
                            event.target.value = "";
                            return;
                        }

                        this.formData.identityDocumentFile = file;
                        // If it's an image, create preview. If PDF, show a generic icon.
                        if (file.type.startsWith('image/')) {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                                this.formData.identityDocumentPreview = e.target.result;
                            };
                            reader.readAsDataURL(file);
                        } else {
                            // For PDF, use a generic PDF icon SVG. This SVG is a base64 encoded Font Awesome file-pdf icon.
                            this.formData.identityDocumentPreview = 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="%23cceaff" d="M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zm384 64V0L512 128H384zM160 352c17.7 0 32 14.3 32 32v32c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32V384c0-17.7 14.3-32 32-32h32zM272 352c17.7 0 32 14.3 32 32v32c0 17.7-14.3 32-32 32H240c-17.7 0-32-14.3-32-32V384c0-17.7 14.3-32 32-32h32zM384 352c17.7 0 32 14.3 32 32v32c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V384c0-17.7 14.3-32 32-32h32z"/></svg>';
                        }
                    }
                    this.validateStep(5); // Re-validate the step
                },
                removeIdentityDocument() {
                    this.formData.identityDocumentFile = null;
                    this.formData.identityDocumentPreview = '';
                    document.getElementById('identityDocument').value = '';
                    this.validationErrors.identityDocument = ''; // Clear error if any
                    this.validateStep(5);
                },

                // Detect Pincode via Geolocation
                async detectPincode() {
                    this.locationStatusMessage = 'Detecting your location...';
                    this.locationStatusClass = 'text-gray-600';
                    this.formData.servicePincode = ''; // Clear previous pincode while detecting

                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(async (position) => {
                            const { latitude, longitude } = position.coords;
                            try {
                                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);
                                const data = await response.json();
                                // Attempt to extract pincode from address components
                                const postcode = data.address.postcode || data.address.postal_code;
                                if (postcode) {
                                    this.formData.servicePincode = postcode;
                                    this.locationStatusMessage = 'Pincode detected successfully!';
                                    this.locationStatusClass = 'text-green-600';
                                    this.validateStep(2); // Re-validate after setting pincode
                                } else {
                                    this.formData.servicePincode = '';
                                    this.locationStatusMessage = 'Pincode not found for your location. Please enter manually.';
                                    this.locationStatusClass = 'text-red-500';
                                }
                            } catch (err) {
                                this.formData.servicePincode = '';
                                this.locationStatusMessage = 'Unable to retrieve address. Please enter manually.';
                                this.locationStatusClass = 'text-red-500';
                                console.error("Error fetching address:", err);
                            }
                        }, (error) => {
                            this.formData.servicePincode = '';
                            if (error.code === error.PERMISSION_DENIED) {
                                this.locationStatusMessage = 'Location access denied by user. Please enter manually.';
                            } else if (error.code === error.POSITION_UNAVAILABLE) {
                                this.locationStatusMessage = 'Location information is unavailable. Please enter manually.';
                            } else if (error.code === error.TIMEOUT) {
                                this.locationStatusMessage = 'The request to get user location timed out. Please enter manually.';
                            } else {
                                this.locationStatusMessage = 'An unknown error occurred. Please enter manually.';
                            }
                            this.locationStatusClass = 'text-red-500';
                            console.error("Geolocation error:", error);
                        });
                    } else {
                        this.locationStatusMessage = 'Geolocation not supported by your browser. Please enter manually.';
                        this.locationStatusClass = 'text-red-500';
                    }
                },

                // Centralized validation logic
                validateStep(step) {
                    this.validationErrors = {};
                    let isValid = true;

                    if (step === 1) { // Personal Details
                        if (!this.formData.fullName || this.formData.fullName.trim().length < 3) {
                            this.validationErrors.fullName = 'Full Name is required and must be at least 3 characters.';
                            isValid = false;
                        }
                        if (!this.formData.shortBio || this.formData.shortBio.trim().length < 20) {
                            this.validationErrors.shortBio = 'Short Bio is required and must be at least 20 characters.';
                            isValid = false;
                        }
                    } else if (step === 2) { // Skills & Contact
                        if (!this.formData.yearsExperience) {
                            this.validationErrors.yearsExperience = 'Please select your years of experience.';
                            isValid = false;
                        }
                        const pincodeRegex = /^\d{6}$/;
                        if (!this.formData.servicePincode || !pincodeRegex.test(this.formData.servicePincode)) {
                            this.validationErrors.servicePincode = 'Please enter a valid 6-digit Indian pincode.';
                            isValid = false;
                        }
                        if (!this.formData.workerSkills) {
                            this.validationErrors.workerSkills = 'Please select your primary skill.';
                            isValid = false;
                        }
                        const phoneRegex = /^[6-9]\d{9}$/;
                        if (!this.formData.contactPhone || !phoneRegex.test(this.formData.contactPhone)) {
                            this.validationErrors.contactPhone = 'Please enter a valid 10-digit Indian phone number (starts with 6-9).';
                            isValid = false;
                        }
                        if (this.formData.contactEmail && !this.validateEmail(this.formData.contactEmail)) {
                            this.validationErrors.contactEmail = 'Please enter a valid email address.';
                            isValid = false;
                        }
                    } else if (step === 3) { // Preferences
                        if (this.formData.dndStartTime && this.formData.dndEndTime) {
                            // Optional: Add logic to ensure end time is after start time if needed
                            // For simplicity, just checking if both are selected if user provides them
                        } else if ((this.formData.dndStartTime && !this.formData.dndEndTime) || (!this.formData.dndStartTime && this.formData.dndEndTime)) {
                             this.validationErrors.dndStartTime = 'Both DND Start and End times are required if setting a range.';
                             this.validationErrors.dndEndTime = 'Both DND Start and End times are required if setting a range.';
                             isValid = false;
                        }

                        if (this.formData.minPayExpectation && (isNaN(this.formData.minPayExpectation) || parseFloat(this.formData.minPayExpectation) < 0)) {
                            this.validationErrors.minPayExpectation = 'Please enter a valid minimum pay expectation (positive number).';
                            isValid = false;
                        }
                    } else if (step === 4) { // Payment Setup
                        if (!this.formData.bankAccountNumber || this.formData.bankAccountNumber.trim().length < 9) { // Typical min length
                            this.validationErrors.bankAccountNumber = 'Bank Account Number is required and must be valid (min 9 digits).';
                            isValid = false;
                        }
                        const ifscRegex = /^[A-Z]{4}0[A-Z0-9]{6}$/;
                        if (!this.formData.ifscCode || !ifscRegex.test(this.formData.ifscCode)) {
                            this.validationErrors.ifscCode = 'IFSC Code is required and must be in valid format (e.g., SBIN0000001).';
                            isValid = false;
                        }
                    } else if (step === 5) { // Identity Verification
                        // Identity document is optional for "verified badge" (as per your original description)
                        // If you want to make it required, uncomment the following:
                        /*
                        if (!this.formData.identityDocumentFile) {
                            this.validationErrors.identityDocument = 'Identity document is required for verification.';
                            isValid = false;
                        }
                        */
                    }
                    // Step 6 (Review) has no specific fields to validate; it just displays data.
                    return isValid;
                },

                validateEmail(email) {
                    const pattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return pattern.test(email);
                },

                // Navigation functions
                nextStep(stepToValidate) {
                    if (this.validateStep(stepToValidate)) {
                        this.currentStep++;
                        this.$nextTick(() => {
                            this.$el.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        });
                    } else {
                        this.$nextTick(() => {
                            const firstErrorField = document.querySelector('.invalid-field');
                            if (firstErrorField) {
                                firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            }
                        });
                    }
                },
                prevStep() {
                    if (this.currentStep > 1) {
                        this.currentStep--;
                        this.$nextTick(() => {
                            this.$el.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        });
                    }
                },

                // Final form submission
                submitForm() {
                    // Validate all previous steps before final submission
                    const step1Valid = this.validateStep(1);
                    const step2Valid = this.validateStep(2);
                    const step3Valid = this.validateStep(3);
                    const step4Valid = this.validateStep(4);
                    const step5Valid = this.validateStep(5);

                    if (step1Valid && step2Valid && step3Valid && step4Valid && step5Valid) {
                        const formElement = document.getElementById('workerProfileForm');
                        const formDataToSend = new FormData();

                        // Append all text/number data from formData
                        for (const key in this.formData) {
                            if (key !== 'profilePictureFile' && key !== 'profilePicturePreview' &&
                                key !== 'identityDocumentFile' && key !== 'identityDocumentPreview') {
                                formDataToSend.append(key, this.formData[key]);
                            }
                        }

                        // Append file inputs
                        if (this.formData.profilePictureFile) {
                            formDataToSend.append('profilePicture', this.formData.profilePictureFile);
                        }
                        if (this.formData.identityDocumentFile) {
                            formDataToSend.append('identityDocument', this.formData.identityDocumentFile);
                        }

                        // --- DEMO LOGGING (Replace with actual AJAX/fetch call to backend) ---
                        console.log("--- Worker Profile Data to Send ---");
                        for (let pair of formDataToSend.entries()) {
                            if (pair[1] instanceof File) {
                                console.log(pair[0] + ': [File object: ' + pair[1].name + ', ' + pair[1].size + ' bytes]');
                            } else {
                                console.log(pair[0] + ': ' + pair[1]);
                            }
                        }
                        console.log("--- End Worker Profile Data ---");

                        // You would typically send this formDataToSend via fetch or XMLHttpRequest
                        /*
                        fetch(formElement.action, {
                            method: formElement.method,
                            body: formDataToSend,
                        })
                        .then(response => response.json()) // Or .text() depending on backend response
                        .then(data => {
                            console.log('Success:', data);
                            alert('Worker profile saved successfully!');
                            // Reset form or redirect
                            this.resetForm();
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Failed to save profile. Please try again.');
                        });
                        */
                        alert('Worker profile saved successfully (Demo)! Check console for data.');
                        this.resetForm(); // Reset form for demo purposes
                    } else {
                        alert('Please complete all required fields correctly before submitting.');
                        // Navigate back to the first step where validation failed
                        if (!step1Valid) this.currentStep = 1;
                        else if (!step2Valid) this.currentStep = 2;
                        else if (!step3Valid) this.currentStep = 3;
                        else if (!step4Valid) this.currentStep = 4;
                        else this.currentStep = 5;

                        this.$nextTick(() => {
                            const firstErrorField = document.querySelector('.invalid-field');
                            if (firstErrorField) {
                                firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            }
                        });
                    }
                },

                resetForm() {
                    this.formData = {
                        fullName: '',
                        profilePictureFile: null,
                        profilePicturePreview: '',
                        shortBio: '',
                        yearsExperience: '',
                        servicePincode: '',
                        workerSkills: '',
                        contactPhone: '',
                        contactEmail: '',
                        dndStartTime: '',
                        dndEndTime: '',
                        minPayExpectation: '',
                        bankAccountNumber: '',
                        ifscCode: '',
                        identityDocumentFile: null,
                        identityDocumentPreview: '',
                    };
                    this.validationErrors = {};
                    this.currentStep = 1;
                    document.getElementById('profilePicture').value = ''; // Clear file inputs
                    document.getElementById('identityDocument').value = '';
                }
            };
        }

        // Global function for the time picker, accessible by Alpine components
        function timePicker(formData, validationErrors, validateStep) {
            return {
                openStart: false,
                openEnd: false,
                selectedStart: '',
                selectedEnd: '',
                timeSlots: [],
                formData: formData, // Reference to the main formData
                validationErrors: validationErrors, // Reference to the main validationErrors
                validateStep: validateStep, // Reference to the main validateStep function
                init() {
                    const slots = [];
                    const format = (h, m) => {
                        const hour = h % 12 || 12;
                        const ampm = h < 12 ? 'AM' : 'PM';
                        const minutes = m.toString().padStart(2, '0');
                        return `${hour}:${minutes} ${ampm}`;
                    };

                    for (let h = 0; h < 24; h++) {
                        for (let m = 0; m < 60; m += 30) {
                            slots.push(format(h, m));
                        }
                    }
                    this.timeSlots = slots;

                    // Initialize selectedStart/End from formData if they exist
                    this.selectedStart = this.formData.dndStartTime || '';
                    this.selectedEnd = this.formData.dndEndTime || '';
                },
                selectTime(type, time) {
                    if (type === 'start') {
                        this.selectedStart = time;
                        this.formData.dndStartTime = time;
                        this.openStart = false;
                    } else {
                        this.selectedEnd = time;
                        this.formData.dndEndTime = time;
                        this.openEnd = false;
                    }
                    this.validateStep(3); // Call validation on step 3 after time selection
                }
            }
        }
    </script>
</body>

</html>